/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package mid.term;

import java.awt.BorderLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.io.IOException;
import java.nio.file.FileAlreadyExistsException;
import java.nio.file.Files;
import java.nio.file.StandardCopyOption;
import javax.swing.JButton;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTextField;

/**
 *
 * @author WinD
 */
public class a extends javax.swing.JFrame {

    /**
     * Creates new form a
     */
    public a() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

public class DirectoryCopyProgram extends JFrame {

    private JTextField sourceTextField;
    private JTextField destinationTextField;

    public DirectoryCopyProgram() {
        setTitle("Copy Directory");
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setSize(400, 200);
        setLocationRelativeTo(null);

        JPanel mainPanel = new JPanel(new BorderLayout());

        JPanel inputPanel = new JPanel();
        inputPanel.add(new JLabel("Source Directory: "));
        sourceTextField = new JTextField(20);
        inputPanel.add(sourceTextField);

        JButton browseSourceButton = new JButton("Browse");
        browseSourceButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                JFileChooser fileChooser = new JFileChooser();
                fileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
                int option = fileChooser.showOpenDialog(DirectoryCopyProgram.this);
                if (option == JFileChooser.APPROVE_OPTION) {
                    File selectedFile = fileChooser.getSelectedFile();
                    sourceTextField.setText(selectedFile.getAbsolutePath());
                }
            }
        });
        inputPanel.add(browseSourceButton);

        inputPanel.add(new JLabel("Destination Directory: "));
        destinationTextField = new JTextField(20);
        inputPanel.add(destinationTextField);

        JButton browseDestinationButton = new JButton("Browse");
        browseDestinationButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                JFileChooser fileChooser = new JFileChooser();
                fileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
                int option = fileChooser.showOpenDialog(DirectoryCopyProgram.this);
                if (option == JFileChooser.APPROVE_OPTION) {
                    File selectedFile = fileChooser.getSelectedFile();
                    destinationTextField.setText(selectedFile.getAbsolutePath());
                }
            }
        });
        inputPanel.add(browseDestinationButton);

        mainPanel.add(inputPanel, BorderLayout.CENTER);

        JButton copyButton = new JButton("Copy");
        copyButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                String sourcePath = sourceTextField.getText();
                String destinationPath = destinationTextField.getText();

                if (sourcePath.isEmpty() || destinationPath.isEmpty()) {
                    JOptionPane.showMessageDialog(DirectoryCopyProgram.this, "Please enter both source and destination directories.");
                } else {
                    copyDirectory(sourcePath, destinationPath);
                }
            }
        });
        mainPanel.add(copyButton, BorderLayout.SOUTH);

        add(mainPanel);
    }

    private void copyDirectory(String sourcePath, String destinationPath) {
        try {
            File sourceDir = new File(sourcePath);
            File destinationDir = new File(destinationPath);

            Files.copy(sourceDir.toPath(), destinationDir.toPath(), StandardCopyOption.COPY_ATTRIBUTES);

            JOptionPane.showMessageDialog(DirectoryCopyProgram.this, "Copy successful!");
        } catch (FileAlreadyExistsException e) {
            JOptionPane.showMessageDialog(DirectoryCopyProgram.this, "Destination directory already exists. Please choose a different destination.");
        } catch (IOException e) {
            JOptionPane.showMessageDialog(DirectoryCopyProgram.this, "An error occurred while copying the directory: " + e.getMessage());
        }
    }

   
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new a().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
}
